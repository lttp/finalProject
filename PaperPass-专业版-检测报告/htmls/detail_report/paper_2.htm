<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_1.htm">上一页</a>
<a class="pagelink" href="paper_3.htm">下一页</a>
<a class="pagelink" href="paper_6.htm">尾页</a>
页码：2/6页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">24</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/85/85.htm' target='right' class='red' >（3）满足wiki的重要特征，良好的个性化设置。</a><a href='../sentence_detail/86/86.htm' target='right' class='red' >保留网页每一次改动的版本，即使参与者将整个页面删掉，管理者也会很方便地从记录中恢复最正确的页面版本，这使得开放性编辑成为可能。</a><a href='../sentence_detail/87/87.htm' target='right' class='red' >能够自动产生链接，在进行文本编辑时，只要编辑双中括号中的内容（如</a><span class='green'>“［［条目］］”</span><span class='green'>），将自动产生链接。</span><a href='../sentence_detail/90/90.htm' target='right' class='red' >允许使用模板，方便对相同内容的重复使用、更新。</a><a href='../sentence_detail/91/91.htm' target='right' class='red' >支持分类，并根据分类在不同的文章之间自动产生关联。</a><a href='../sentence_detail/92/92.htm' target='right' class='red' >允许每个用户自行选择系统外观。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">25</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/93/93.htm' target='right' class='red' >（4）拥有页面保护、 IP禁止技术，管理员可以对一些主要页面（如首页、已经相当完善的词条、标准模板等）用保护技术将内容锁定，</a><a href='../sentence_detail/94/94.htm' target='right' class='red' >这样，其他人员就不能再对这些内容作编辑修改。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">26</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>MVC框架也可以作为平台的架构工具进行使用。</span><span class='green'>典型的代表是SpringMVC框架。</span><a href='../sentence_detail/97/97.htm' target='right' class='orange' >MVC模式（Model View Controller，简称MVC）是软件工程中的一种软件架构模式，把软件系统分为模型（Model）、视图（View）和控制器（Controller）三个部分[5]。</a><span class='green'>Model对象包含数据；</span><a href='../sentence_detail/99/99.htm' target='right' class='red' >View对象负责显示有模型包含的数据，用于与用户交互；</a><a href='../sentence_detail/100/100.htm' target='right' class='red' >Controller对象是介于Model与View之间的桥梁，它可以分发和处理用户的请求，选择适当的视图用于显示模型包含的数据返回给用户。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">27</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/101/101.htm' target='right' class='orange' > SpringMVC框架提供了构建 Web应用程序的全功能 MVC模块[6]，是一种高度可配置的 MVC框架，</a><a href='../sentence_detail/102/102.htm' target='right' class='red' >可以定制本地化和主图解析，并提供多种视图技术，实现了控制器、模型对象、分派器以及处理程序对象的多角色分离[7]，</a><span class='green'>这种分离让它们更容易进行定制。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">28</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>从平台的扩展性来看，SpringMVC框架数据和视图分离，添加页面方便，但是需要由开发者进行添加；</span><a href='../sentence_detail/105/105.htm' target='right' class='orange' >而Mediawiki自带编辑语言，可以有用户进行页面编辑，无疑降低了编辑的门槛。</a><span class='green'>从开发难度来看，Mediawiki由php与MySQL构建，有完整的教程，其安装简单，配置过程仅仅需要回答几个配置问题即完成，平台架构起来相对简单；</span><span class='green'>而SpringMVC需要对javaweb开发以及SpringMVC框架本身进行系统的学习，学习周期较长。</span><a href='../sentence_detail/108/108.htm' target='right' class='orange' >而从语言特点来看，Mediawiki使用PHP语言，支持热部署，但是连接数据库的速度慢；</a><span class='green'>而SpringMVC热部署能力弱，但是其jdbc数据库连接模块连接数据库的速度远快于php。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">29</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本项目的京津冀安全地图的构建需要用到的数据为 json格式，可以直接由 JavaScript从后台读取，</span><span class='green'>不需要连接数据库，而 php的热部署功能也能够保证平台的运行不会因为修改而停止。</span><span class='green'>故本平台选择Mediawiki作为开发平台。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">30</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.2 d3.js</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">31</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/114/114.htm' target='right' class='orange' >d3.js（data drive document）是一个基于数据的文档操作的JavaScript库[8]，它通过数据加载、数据绑定、分析元素转换和大量元素操作来进行数据的可视化。</a><span class='green'>与excel不同，它给用户提供了自定义的映射规则。</span><span class='green'>根据用户的需求不同，用户可以自己决定图形的映射规则，如颜色、大小等。</span><span class='green'>D3不支持旧版浏览器，这样可以使得其代码更加干净。</span><a href='../sentence_detail/118/118.htm' target='right' class='orange' >D3在处理SVG上表现很好，这是万维网（world wide web）规范的指定网络矢量图形标准[9]。</a><a href='../sentence_detail/119/119.htm' target='right' class='red' >SVG严格遵守XML语法并使用文本格式的描述语言进行图像内容描述。</a><a href='../sentence_detail/120/120.htm' target='right' class='orange' >它是一个不受分辨率影响的矢量图形格式[10]。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">32</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Chart.js是和d3.js同类型的可视化JavaScript库，其大小小于d3.js。</span><a href='../sentence_detail/122/122.htm' target='right' class='red' >且建立在HTML5 Canvas的基础上，目前它支持6中图表类型（折线图，条形图，雷达图，饼图，柱状图和极地区域区）。</a><a href='../sentence_detail/123/123.htm' target='right' class='red' >而且，它是一个独立的包，不依赖第三方的JavaScript库。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">33</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/124/124.htm' target='right' class='red' >Highcharts JS 是一个制作图表的纯 Javascript 类库，主要特性如下：</a><span class='green'>兼容性：</span><span class='green'>兼容当今所有的浏览器，包括 iPhone、IE 和火狐等等；</span><span class='green'>对个人用户完全免 费；</span><span class='green'>纯JS，无BS；</span><span class='green'>支持大部分的图表类型：</span><a href='../sentence_detail/130/130.htm' target='right' class='red' >直线图，曲线图、区域图、区域曲线图、柱状图、饼装图、散布图；</a><span class='green'>跨语言：</span><span class='green'>不管是 PHP、Asp.net 还是 Java 都可以使用。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">34</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>以上三者均为纯JavaScript图形库，不依赖后台语言。</span><a href='../sentence_detail/134/134.htm' target='right' class='orange' >而Chart.js仅支持六种（折线图，条形图，雷达图，饼图，柱状图和极地区域区）图表类型，自由性要弱于另外两种JavaScript库；</a><span class='green'>Highcharts.js的主要功能为画图，对数据的控制力度要弱于chart.js以及d3.js；</span><span class='green'>另外，d3.js虽然对数据的控制更强一些、且对于用户的自由性更高，但是其绘图是基于SVG，SVG对于大量数据的处理速度要慢与canvas。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">35</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本项目是平台性项目，该部分库主要用于实现京津冀安全地图，对加载速度要求不高。</span><span class='green'>综合以上对比，d3.js无疑是最好的选择。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">36</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.3 scrapy</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">37</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>scrapy是目前比较主流的开源爬虫框架[11]。</span><span class='green'>本框架用python编写，并基于twist框架---基于事件驱动的网络引擎框架。</span><span class='green'>Scrapy的各个组件及工作流程如下所示：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">38</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.</span><span class='green'>Scrapy Engine</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">39</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/145/145.htm' target='right' class='red' >引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">40</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2. 调度器(Scheduler)</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">41</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/147/147.htm' target='right' class='red' >调度器从引擎接受request并将他们入队，以便之后引擎请求他们时提供给引擎。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">42</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3. 下载器(Downloader)</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">43</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/149/149.htm' target='right' class='red' >下载器负责获取页面数据并提供给引擎，而后提供给spider。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">44</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.</span><span class='green'>Spiders</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">45</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/152/152.htm' target='right' class='red' >Spider是Scrapy用户编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。</a><span class='green'>每个spider负责处理一个特定(或一些)网站。</span><span class='green'>更多内容请看 Spiders 。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">46</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>5.</span><span class='green'>Item Pipeline</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">47</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Item Pipeline负责处理被spider提取出来的item。</span><a href='../sentence_detail/158/158.htm' target='right' class='red' >典型的处理有清理、 验证及持久化(例如存取到数据库中)。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">48</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>6. 下载器中间件(Downloader middlewares)</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">49</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/160/160.htm' target='right' class='red' >下载器中间件是在引擎及下载器之间的特定钩子(specific hook)，处理Downloader传递给引擎的response。</a><a href='../sentence_detail/161/161.htm' target='right' class='red' > 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">50</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>7.</span><span class='green'>Spider中间件(Spider middlewares)</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">51</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。</span><a href='../sentence_detail/165/165.htm' target='right' class='red' > 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">52</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>其工作流程如下：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">53</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/167/167.htm' target='right' class='red' >1. 引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">54</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/168/168.htm' target='right' class='red' >2. 引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">55</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/169/169.htm' target='right' class='red' >3. 引擎向调度器请求下一个要爬取的URL。</a>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_1.htm">上一页</a>
<a class="pagelink" href="paper_3.htm">下一页</a>
<a class="pagelink" href="paper_6.htm">尾页</a>
页码：2/6页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport_banner" target="_blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2017 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
